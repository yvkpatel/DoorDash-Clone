{"ast":null,"code":"/*  DriverManager.js\n    Provides methods for the driver dashboard to interact with databases and manage the driver's local information.\n*/\nclass DriverManager {\n  constructor(id, income, orders) {\n    this.id = id;\n    this.income = income;\n    this.orders = orders;\n  } // =============== LOCAL MANAGEMENT METHODS ===============\n  // Converts the driver's income from a float to a currency formatted string.\n\n\n  getIncome() {\n    return this.income + \"$\";\n  }\n\n  updateIncome(x) {\n    this.income += x;\n  } // =============== METHODS THAT INTERACT WITH DATABASES ===============\n  // PLACEHOLDER: will fetch driver tasks from database.\n  // Current implementation simply returns a hardcoded list of imaginary tasks.\n\n\n  getDriverOrders() {\n    // @JR Note: some hefty refactoring might have to take place on DriverDash.js\n    // depends on how the database fetches.\n    return [{\n      id: 1,\n      title: \"John Doe\",\n      restaurant: \"Boston Pizza\",\n      destination: \"1600 Pennsylvania Avenue\"\n    } // {\n    //     id: 2,\n    //     title: \"Famous Pizza, I guess.\",\n    //     restaurant: \"Dominos\",\n    //     destination: \"4059 Mt Lee Dr. Hollywood\"\n    // },\n    // {\n    //     id: 3,\n    //     title: \"Pentagram Pizza\",\n    //     restaurant: \"Pizza Hut\",\n    //     destination: \"6114 California Street\"\n    // },\n    // {\n    //     id: 4,\n    //     title: \"Curious Pizza\",\n    //     restaurant: \"???\",\n    //     destination: \"221B Baker Street\"\n    // },\n    // {\n    //     id: 5,\n    //     title: \"Pizza, dude.\",\n    //     restaurant: \"Literally Anywhere\",\n    //     destination: \"122 + 1/8th Bleaker Street\"\n    // },\n    ];\n  } // PLACEHOLDER: When called it should inform database that the order is now taken.\n\n\n  driverAcceptOrder(orderID) {\n    console.log(\"Order ID: \" + orderID);\n  }\n\n}\n\nexport default DriverManager;","map":{"version":3,"sources":["/Users/yash/DoorDash-Clone/gui-module/src/components/driver/dashboard/DriverManager.js"],"names":["DriverManager","constructor","id","income","orders","getIncome","updateIncome","x","getDriverOrders","title","restaurant","destination","driverAcceptOrder","orderID","console","log"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,EAAD,EAAKC,MAAL,EAAaC,MAAb,EAAqB;AAC9B,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD,GALiB,CAOlB;AAEA;;;AACAC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKF,MAAL,GAAc,GAArB;AACD;;AAEDG,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,SAAKJ,MAAL,IAAeI,CAAf;AACD,GAhBiB,CAkBlB;AAEA;AACA;;;AACAC,EAAAA,eAAe,GAAG;AAChB;AACA;AACA,WAAO,CACL;AACEN,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,UAFT;AAGEC,MAAAA,UAAU,EAAE,cAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KADK,CAOL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BK,KAAP;AAgCD,GAzDiB,CA2DlB;;;AACAC,EAAAA,iBAAiB,CAACC,OAAD,EAAU;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,OAA3B;AACD;;AA9DiB;;AAiEpB,eAAeb,aAAf","sourcesContent":["/*  DriverManager.js\n    Provides methods for the driver dashboard to interact with databases and manage the driver's local information.\n*/\nclass DriverManager {\n  constructor(id, income, orders) {\n    this.id = id;\n    this.income = income;\n    this.orders = orders;\n  }\n\n  // =============== LOCAL MANAGEMENT METHODS ===============\n\n  // Converts the driver's income from a float to a currency formatted string.\n  getIncome() {\n    return this.income + \"$\";\n  }\n\n  updateIncome(x) {\n    this.income += x;\n  }\n\n  // =============== METHODS THAT INTERACT WITH DATABASES ===============\n\n  // PLACEHOLDER: will fetch driver tasks from database.\n  // Current implementation simply returns a hardcoded list of imaginary tasks.\n  getDriverOrders() {\n    // @JR Note: some hefty refactoring might have to take place on DriverDash.js\n    // depends on how the database fetches.\n    return [\n      {\n        id: 1,\n        title: \"John Doe\",\n        restaurant: \"Boston Pizza\",\n        destination: \"1600 Pennsylvania Avenue\",\n      },\n      // {\n      //     id: 2,\n      //     title: \"Famous Pizza, I guess.\",\n      //     restaurant: \"Dominos\",\n      //     destination: \"4059 Mt Lee Dr. Hollywood\"\n      // },\n      // {\n      //     id: 3,\n      //     title: \"Pentagram Pizza\",\n      //     restaurant: \"Pizza Hut\",\n      //     destination: \"6114 California Street\"\n      // },\n      // {\n      //     id: 4,\n      //     title: \"Curious Pizza\",\n      //     restaurant: \"???\",\n      //     destination: \"221B Baker Street\"\n      // },\n      // {\n      //     id: 5,\n      //     title: \"Pizza, dude.\",\n      //     restaurant: \"Literally Anywhere\",\n      //     destination: \"122 + 1/8th Bleaker Street\"\n      // },\n    ];\n  }\n\n  // PLACEHOLDER: When called it should inform database that the order is now taken.\n  driverAcceptOrder(orderID) {\n    console.log(\"Order ID: \" + orderID);\n  }\n}\n\nexport default DriverManager;\n"]},"metadata":{},"sourceType":"module"}