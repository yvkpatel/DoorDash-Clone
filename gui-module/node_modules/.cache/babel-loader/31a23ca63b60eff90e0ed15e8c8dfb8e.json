{"ast":null,"code":"/*  RestaurantManager.js\n    Provides methods for the restaurant dashboard to interact with databases and manage the restaurant's local information.\n*/\nclass RestaurantManager {\n  constructor(id, income, orders) {\n    this.id = id;\n    this.income = income;\n    this.orders = orders;\n  } // =============== LOCAL MANAGEMENT METHODS ===============\n  // Converts the restaurant's income from a float to a currency formatted string.\n\n\n  getIncome() {\n    return \"$\" + this.income;\n  }\n\n  updateIncome(x) {\n    this.income += x;\n  } // =============== METHODS THAT INTERACT WITH DATABASES ===============\n  // PLACEHOLDER: will fetch restaurant's orders from database.\n  // Current implementation simply returns a hardcoded list of imaginary orders.\n\n\n  getRestaurantOrders() {\n    return [{\n      id: 1,\n      title: \"Presidential Pizza\",\n      restaurant: \"Boston Pizza\",\n      destination: \"1600 Pennsylvania Avenue\"\n    }, {\n      id: 2,\n      title: \"Famous Pizza, I guess.\",\n      restaurant: \"Dominos\",\n      destination: \"4059 Mt Lee Dr. Hollywood\"\n    }, {\n      id: 3,\n      title: \"Pentagram Pizza\",\n      restaurant: \"Pizza Hut\",\n      destination: \"6114 California Street\"\n    }, {\n      id: 4,\n      title: \"Curious Pizza\",\n      restaurant: \"???\",\n      destination: \"221B Baker Street\"\n    }, {\n      id: 5,\n      title: \"Pizza, dude.\",\n      restaurant: \"Literally Anywhere\",\n      destination: \"122 + 1/8th Bleaker Street\"\n    }];\n  } // PLACEHOLDER: When called it should inform database that the order status has changed.\n\n\n  updateOrder(orderID) {\n    console.log(\"Order ID: \" + orderID);\n  }\n\n}\n\nexport default RestaurantManager;","map":{"version":3,"sources":["/Users/yash/DoorDash-Clone/gui-module/src/components/restaurant/dashboard/RestaurantManager.js"],"names":["RestaurantManager","constructor","id","income","orders","getIncome","updateIncome","x","getRestaurantOrders","title","restaurant","destination","updateOrder","orderID","console","log"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,EAAD,EAAKC,MAAL,EAAaC,MAAb,EAAqB;AAC9B,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD,GALqB,CAOtB;AAEA;;;AACAC,EAAAA,SAAS,GAAG;AACV,WAAO,MAAM,KAAKF,MAAlB;AACD;;AAEDG,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,SAAKJ,MAAL,IAAeI,CAAf;AACD,GAhBqB,CAkBtB;AAEA;AACA;;;AACAC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,CACL;AACEN,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,oBAFT;AAGEC,MAAAA,UAAU,EAAE,cAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KADK,EAOL;AACET,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,wBAFT;AAGEC,MAAAA,UAAU,EAAE,SAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KAPK,EAaL;AACET,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,iBAFT;AAGEC,MAAAA,UAAU,EAAE,WAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KAbK,EAmBL;AACET,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,eAFT;AAGEC,MAAAA,UAAU,EAAE,KAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KAnBK,EAyBL;AACET,MAAAA,EAAE,EAAE,CADN;AAEEO,MAAAA,KAAK,EAAE,cAFT;AAGEC,MAAAA,UAAU,EAAE,oBAHd;AAIEC,MAAAA,WAAW,EAAE;AAJf,KAzBK,CAAP;AAgCD,GAvDqB,CAyDtB;;;AACAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,OAA3B;AACD;;AA5DqB;;AA+DxB,eAAeb,iBAAf","sourcesContent":["/*  RestaurantManager.js\n    Provides methods for the restaurant dashboard to interact with databases and manage the restaurant's local information.\n*/\nclass RestaurantManager {\n  constructor(id, income, orders) {\n    this.id = id;\n    this.income = income;\n    this.orders = orders;\n  }\n\n  // =============== LOCAL MANAGEMENT METHODS ===============\n\n  // Converts the restaurant's income from a float to a currency formatted string.\n  getIncome() {\n    return \"$\" + this.income;\n  }\n\n  updateIncome(x) {\n    this.income += x;\n  }\n\n  // =============== METHODS THAT INTERACT WITH DATABASES ===============\n\n  // PLACEHOLDER: will fetch restaurant's orders from database.\n  // Current implementation simply returns a hardcoded list of imaginary orders.\n  getRestaurantOrders() {\n    return [\n      {\n        id: 1,\n        title: \"Presidential Pizza\",\n        restaurant: \"Boston Pizza\",\n        destination: \"1600 Pennsylvania Avenue\",\n      },\n      {\n        id: 2,\n        title: \"Famous Pizza, I guess.\",\n        restaurant: \"Dominos\",\n        destination: \"4059 Mt Lee Dr. Hollywood\",\n      },\n      {\n        id: 3,\n        title: \"Pentagram Pizza\",\n        restaurant: \"Pizza Hut\",\n        destination: \"6114 California Street\",\n      },\n      {\n        id: 4,\n        title: \"Curious Pizza\",\n        restaurant: \"???\",\n        destination: \"221B Baker Street\",\n      },\n      {\n        id: 5,\n        title: \"Pizza, dude.\",\n        restaurant: \"Literally Anywhere\",\n        destination: \"122 + 1/8th Bleaker Street\",\n      },\n    ];\n  }\n\n  // PLACEHOLDER: When called it should inform database that the order status has changed.\n  updateOrder(orderID) {\n    console.log(\"Order ID: \" + orderID);\n  }\n}\n\nexport default RestaurantManager;\n"]},"metadata":{},"sourceType":"module"}